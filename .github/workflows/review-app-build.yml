name: Build review app

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - staging # only deploy review apps on pull requests to staging

jobs:
  build_and_release:
    name: Build Docker image and release to Heroku review app
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set Review app name from PR
        env:
          BRANCH: ${{ github.event.pull_request.head.ref }}
        run: |
          echo "APP_NAME=$(echo $BRANCH | cut -d '/' -f2- | tr 'A-Z' 'a-z')" >> $GITHUB_ENV

      - name: Set App url variable
        env:
          BRANCH: ${{ github.event.pull_request.head.ref }}
        run: |
          echo "URL=$(echo $(echo $BRANCH | cut -d '/' -f2- | tr 'A-Z' 'a-z').pr.kyso.io)" >> $GITHUB_ENV

      - name: Create app on Heroku and add to pipeline
        continue-on-error: true
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          HEROKU_PIPELINE_NAME: ${{ secrets.HEROKU_PIPELINE_NAME }}
          HEROKU_PIPELINE_STAGE: ${{ secrets.HEROKU_PIPELINE_STAGE }}
        run: |
          heroku apps:create $APP_NAME -t kyso
          heroku pipelines:add $HEROKU_PIPELINE_NAME -a $APP_NAME -s $HEROKU_PIPELINE_STAGE

      - name: Add env vars to app
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          NODE_ENV: ${{ secrets.NODE_ENV }}
          KYSO_FILES_CLOUDFRONT_URL: ${{ secrets.KYSO_FILES_CLOUDFRONT_URL }}
          DATABASE_URI: ${{ secrets.DATABASE_URI }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          PARSE_MASTER_KEY: ${{ secrets.PARSE_MASTER_KEY }}
        run: |
          heroku config:set NODE_ENV=$NODE_ENV -a $APP_NAME
          heroku config:set SELF_URL=https://$URL -a $APP_NAME
          heroku config:set KYSO_FILES_CLOUDFRONT_URL=$KYSO_FILES_CLOUDFRONT_URL -a $APP_NAME
          heroku config:set DATABASE_URI=$DATABASE_URI -a $APP_NAME
          heroku config:set AWS_REGION=$AWS_REGION -a $APP_NAME
          heroku config:set AWS_S3_BUCKET=$AWS_S3_BUCKET -a $APP_NAME
          heroku config:set AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY -a $APP_NAME
          heroku config:set PARSE_MASTER_KEY=$PARSE_MASTER_KEY -a $APP_NAME

      - name: Build and push the Docker image to the Heroku Container registry
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          DOCKER_BUILDKIT: 1
        run: |
          echo $HEROKU_API_KEY | docker login --username=_ --password-stdin registry.heroku.com
          docker build -f Dockerfile --cache-from registry.heroku.com/$APP_NAME/web -t registry.heroku.com/$APP_NAME/web .
          docker push registry.heroku.com/$APP_NAME/web:latest

      - name: Release image on Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          heroku container:login
          heroku container:release -a $APP_NAME web

  set_review_app_custom_domain:
    needs: build_and_release
    name: Set review app custom domain
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install HTTPIE
        run: sudo apt-get install httpie

      - name: Set Review app name from PR
        env:
          BRANCH: ${{ github.event.pull_request.head.ref }}
        run: |
          echo "APP_NAME=$(echo $BRANCH | cut -d '/' -f2- | tr 'A-Z' 'a-z')" >> $GITHUB_ENV

      - name: Set App url variable
        env:
          BRANCH: ${{ github.event.pull_request.head.ref }}
        run: |
          echo "URL=$(echo $(echo $BRANCH | cut -d '/' -f2- | tr 'A-Z' 'a-z').pr.kyso.io)" >> $GITHUB_ENV

      # - name: Teardown Herkou review app custom domain
      #   env:
      #     HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      #     continue-on-error: true
      #   run: |
      #     heroku domains:remove $URL -a $APP_NAME

      # - name: Teardown Cloudflare dns [get existing dns]
      #   continue-on-error: true
      #   env:
      #     CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}
      #     CLOUDFLARE_ZONE: ${{ secrets.CLOUDFLARE_ZONE }}
      #   run: |
      #     http get "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE/dns_records?name=$URL" Authorization:"Bearer $CLOUDFLARE_API_KEY" --ignore-stdin | jq '. .result[0].id'
      #     echo "DNS_ID=$(http get "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE/dns_records?name=$URL" Authorization:"Bearer $CLOUDFLARE_API_KEY" --ignore-stdin | jq '. .result[0].id' -j)" >> $GITHUB_ENV

      # - name: Teardown Cloudflare dns [delete dns]
      #   if: always()
      #   env:
      #     CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}
      #     CLOUDFLARE_ZONE: ${{ secrets.CLOUDFLARE_ZONE }}
      #   run: |
      #     echo $DNS_ID
      #     http delete "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE/dns_records/$DNS_ID" Authorization:"Bearer $CLOUDFLARE_API_KEY" --ignore-stdin --verbose

      - name: Check if domain exists
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          continue-on-error: true
        run: |
          heroku domains:info $URL -a $APP_NAME

      - name: Set Herkou review app custom domain
        if: ${{ failure() }}
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          echo CNAME=$(heroku domains:add $URL -a $APP_NAME --json | jq '. .cname' -j) >> $GITHUB_ENV

      - name: Set Cloudflare CNAME
        if: ${{ env.CNAME }}
        env:
          CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}
          CLOUDFLARE_ZONE: ${{ secrets.CLOUDFLARE_ZONE }}
        run: |
          http post "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE/dns_records" Authorization:"Bearer $CLOUDFLARE_API_KEY" type="CNAME" name=$URL content=$CNAME ttl="1" --ignore-stdin --verbose

      - name: Set Herkou review app ACM
        if: ${{ env.CNAME }}
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          heroku certs:auto:enable -a $APP_NAME

      - name: Comment on PR with url
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Application deployed to https://${process.env.URL}\nHeroku admin page for app is https://dashboard.heroku.com/apps/${process.env.APP_NAME}`
            })